import 'package:flutter/material.dart';
import '/models/pronunciation_assessment_result.dart';
import '/services/pronunciation_assessment_service.dart';

class PronunciationAssessmentWidget extends StatefulWidget {
  final String textToPronounce;

  const PronunciationAssessmentWidget({super.key, required this.textToPronounce});

  @override
  _PronunciationAssessmentWidgetState createState() =>
      _PronunciationAssessmentWidgetState();
}

class _PronunciationAssessmentWidgetState
    extends State<PronunciationAssessmentWidget> {
  final PronunciationAssessmentService _assessmentService =
  PronunciationAssessmentService();
  bool _isRecording = false;
  bool _isProcessing = false;
  PronunciationAssessmentResult? _assessmentResult;

  @override
  void dispose() {
    _assessmentService.dispose();
    super.dispose();
  }

  Future<void> _handleRecording() async {
    if (_isRecording) {
      // D·ª´ng ghi √¢m
      await _assessmentService.stopRecording();
      setState(() {
        _isRecording = false;
        _isProcessing = true; // Loading khi x·ª≠ l√Ω ƒë√°nh gi√°
      });
      await _fetchAssessment();
    } else {
      // X√≥a file √¢m thanh c≈© v√† b·∫Øt ƒë·∫ßu ghi √¢m m·ªõi
      await _assessmentService.startRecording();
      setState(() {
        _isRecording = true;
        _assessmentResult = null; // X√≥a k·∫øt qu·∫£ c≈© khi ghi √¢m l·∫°i
      });
    }
  }

  Future<void> _fetchAssessment() async {
    final result =
    await _assessmentService.fetchAssessment(text: widget.textToPronounce);
    setState(() {
      _assessmentResult = result;
      _isProcessing = false; // D·ª´ng loading khi c√≥ k·∫øt qu·∫£
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Ph√°t √¢m: ${widget.textToPronounce}',
          style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 10),

        // üéô N√∫t ghi √¢m
        if (_isProcessing)
          const CircularProgressIndicator() // Loading khi g·ª≠i d·ªØ li·ªáu
        else
          ElevatedButton(
            onPressed: _handleRecording,
            child: Text(_isRecording ? '‚èπ D·ª´ng Ghi √¢m' : 'üéô B·∫Øt ƒë·∫ßu Ghi √¢m'),
          ),

        const SizedBox(height: 10),

        // üìä Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë√°nh gi√°
        if (_assessmentResult != null)
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'ƒêi·ªÉm t·ªïng: ${_assessmentResult!.nBest.isNotEmpty ? _assessmentResult!.nBest[0].pronunciationAssessment.pronScore : "N/A"}',
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 10),
              ElevatedButton(
                onPressed: _handleRecording,
                child: const Text('üîÑ Ghi √¢m l·∫°i'),
              ),
            ],
          ),
      ],
    );
  }
}
